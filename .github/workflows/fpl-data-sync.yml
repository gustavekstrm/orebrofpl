name: FPL Data Sync

on:
  schedule:
    # Run every 15 minutes during FPL season
    - cron: '*/15 * * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main]
    paths: ['participants.config.js']

jobs:
  sync-fpl-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
        
    - name: Fetch FPL bootstrap data
      run: |
        node -e "
        const https = require('https');
        const fs = require('fs');
        
        const fetchData = (url) => {
          return new Promise((resolve, reject) => {
            https.get(url, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  resolve(json);
                } catch (e) {
                  reject(e);
                }
              });
            }).on('error', reject);
          });
        };
        
        const fetchEntryHistory = async (entryId) => {
          try {
            const data = await fetchData(\`https://fantasy.premierleague.com/api/entry/\${entryId}/history/\`);
            return data;
          } catch (e) {
            console.error(\`Failed to fetch history for \${entryId}:\`, e.message);
            return null;
          }
        };
        
        const main = async () => {
          try {
            // Fetch bootstrap data
            console.log('Fetching bootstrap data...');
            const bootstrap = await fetchData('https://fantasy.premierleague.com/api/bootstrap-static/');
            
            // Ensure data directory exists
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            // Save bootstrap data with exact FPL schema (no nesting)
            fs.writeFileSync('data/bootstrap-static.json', JSON.stringify(bootstrap, null, 2));
            console.log('Bootstrap data saved with exact FPL schema');
            
            // Get entry IDs from config (same source as frontend)
            const config = require('./participants.config.js');
            const entryIds = config.ENTRY_IDS || [];
            
            if (entryIds.length === 0) {
              console.error('No entry IDs found in participants.config.js');
              process.exit(1);
            }
            
            console.log(\`Fetching history for \${entryIds.length} entries...\`);
            
            // Create entry directory structure
            if (!fs.existsSync('data/entry')) {
              fs.mkdirSync('data/entry', { recursive: true });
            }
            
            // Fetch history for each entry (with concurrency limit)
            const concurrency = 3;
            const results = {};
            const successfulIds = [];
            
            for (let i = 0; i < entryIds.length; i += concurrency) {
              const batch = entryIds.slice(i, i + concurrency);
              const promises = batch.map(async (entryId) => {
                try {
                  const history = await fetchEntryHistory(entryId);
                  if (history) {
                    // Save individual entry file with exact FPL schema
                    const entryPath = \`data/entry/\${entryId}/history.json\`;
                    fs.writeFileSync(entryPath, JSON.stringify(history, null, 2));
                    results[entryId] = history;
                    successfulIds.push(entryId);
                    console.log(\`Entry \${entryId} saved to \${entryPath}\`);
                  }
                } catch (e) {
                  console.error(\`Failed to fetch/save entry \${entryId}:\`, e.message);
                }
                
                // Rate limiting
                await new Promise(resolve => setTimeout(resolve, 200));
              });
              
              await Promise.all(promises);
              console.log(\`Processed batch \${Math.floor(i/concurrency) + 1}\`);
            }
            
            // Create manifest for transparency
            const manifest = {
              lastSync: new Date().toISOString(),
              ids: successfulIds,
              idsCount: successfulIds.length,
              sha: process.env.GITHUB_SHA?.substring(0, 7) || 'unknown',
              bootstrap: {
                events: bootstrap.events?.length || 0,
                teams: bootstrap.teams?.length || 0,
                players: bootstrap.elements?.length || 0
              },
              latestEvent: bootstrap.events?.find(e => e.finished)?.id || 'unknown'
            };
            
            fs.writeFileSync('data/manifest.json', JSON.stringify(manifest, null, 2));
            console.log('Manifest saved:', manifest);
            
            // Create a summary file for backward compatibility
            const summary = {
              timestamp: manifest.lastSync,
              bootstrap: manifest.bootstrap,
              entries: manifest.idsCount,
              latestEvent: manifest.latestEvent
            };
            
            fs.writeFileSync('data/summary.json', JSON.stringify(summary, null, 2));
            console.log('Summary saved:', summary);
            
            console.log(\`âœ… Successfully synced \${successfulIds.length} entries\`);
            
          } catch (e) {
            console.error('Failed to sync FPL data:', e);
            process.exit(1);
          }
        };
        
        main();
        "
        
    - name: Commit and push data
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/
        git diff --quiet && git diff --staged --quiet || git commit -m "Sync FPL data [skip ci]"
        git push
        
    - name: Update data timestamp
      run: |
        echo "Last updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" > data/last-updated.txt
        git add data/last-updated.txt
        git commit -m "Update data timestamp [skip ci]" || echo "No changes to timestamp"
        git push
